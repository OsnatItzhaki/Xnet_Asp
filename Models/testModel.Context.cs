//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XnetTest.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class testsEntities : DbContext
    {
        public testsEntities()
            : base("name=testsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
    
        public virtual int AddClient_sp(string fullName, string fullNameEng, Nullable<System.DateTime> dateBirth, string identityCard, Nullable<int> cityCode, Nullable<int> bank, Nullable<int> bankBranches, Nullable<int> bankAccountNumber)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("fullName", fullName) :
                new ObjectParameter("fullName", typeof(string));
    
            var fullNameEngParameter = fullNameEng != null ?
                new ObjectParameter("fullNameEng", fullNameEng) :
                new ObjectParameter("fullNameEng", typeof(string));
    
            var dateBirthParameter = dateBirth.HasValue ?
                new ObjectParameter("dateBirth", dateBirth) :
                new ObjectParameter("dateBirth", typeof(System.DateTime));
    
            var identityCardParameter = identityCard != null ?
                new ObjectParameter("identityCard", identityCard) :
                new ObjectParameter("identityCard", typeof(string));
    
            var cityCodeParameter = cityCode.HasValue ?
                new ObjectParameter("cityCode", cityCode) :
                new ObjectParameter("cityCode", typeof(int));
    
            var bankParameter = bank.HasValue ?
                new ObjectParameter("bank", bank) :
                new ObjectParameter("bank", typeof(int));
    
            var bankBranchesParameter = bankBranches.HasValue ?
                new ObjectParameter("bankBranches", bankBranches) :
                new ObjectParameter("bankBranches", typeof(int));
    
            var bankAccountNumberParameter = bankAccountNumber.HasValue ?
                new ObjectParameter("BankAccountNumber", bankAccountNumber) :
                new ObjectParameter("BankAccountNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddClient_sp", fullNameParameter, fullNameEngParameter, dateBirthParameter, identityCardParameter, cityCodeParameter, bankParameter, bankBranchesParameter, bankAccountNumberParameter);
        }
    }
}
